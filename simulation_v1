# -*- coding: utf-8 -*-
"""
Created on Fri Oct  4 12:56:09 2019

@author: timo.stubler
"""

import pandas as pd
import numpy as np
from scipy.integrate import odeint

from components import Signal, Velve

Us = 5 # amplitude
Cp = 1 # pumpkammerkapazität
Rs = 1 # schlauchwiderstand
Rv = 1 # ventilwiderstand
Ur1 = -4 # reservoirdruck
Ur2 = 4 # reservoirdruck
Uc0 = 0 # startdruck in der pumpkammer

T = 35*(Rs+Rv)*Cp # ladedauer | warum nicht faktor 5 !?
steps = 500 # anzahl der zeitschritte
t_space = np.linspace(0, 4*T, steps, endpoint=True)

signal = Signal(amplitude=Us, frequency=1/T)
us = signal.sin # anregungssignal der pumpe
velve = Velve(R=Rv)  
R1velve = velve.const # ventiltyp
R2velve = velve.const # ventiltyp

    
i_scale = 5 # hängt auch von der anzahl der zeitschritte ab!

##############################################################################

def du_dt(u, t):
    u = u[0]
    uv1 = -Ur1+us(t)-u-Rs*((-Ur1+us(t)-u)/(Rs+Rv))
    uv2 = -Ur2+us(t)-u-Rs*((-Ur2+us(t)-u)/(Rs+Rv))

    return (((us(t)-Ur1-u)/(Rv+R1velve(uv1)))+((us(t)-Ur2-u)/(Rv+R2velve(uv2))))/Cp
    
uc = odeint(du_dt, Uc0, t_space)[:,0]

data = pd.DataFrame(columns = ['t', 'us', 'uc', 'ur1', 'ur2', 'i'])
data['uc'] =  uc
data['t'] =  t_space
data['us'] = [us(t) for t in t_space]
data['ur1'] = [Ur1 for _ in t_space]
data['ur2'] = [Ur2 for _ in t_space]
data['i'] = np.gradient(uc)*i_scale

axes = data.plot(x='t', y=['us', 'uc', 'ur1', 'ur2', 'i'], grid=True)
axes.set_title('Simple Pump')
axes.set_xlabel('Time [s]')
axes.set_ylabel('Voltage [V]')

print('nettostrom:', data['i'].sum())
